@page "/Boss-Fight"
@inject ILocalStorageService localStorage

<div class="@flashClassGreen">

    <div class="@flashClassRed">

        <div class="question-box">
          
            <div class="topcenter-container">
                <p class="question">@question</p>
                <p class="timer">Time Remaining: @timeRemainingFormatted</p>
            </div>
         
           

        </div>
        
        <div class="answer-box">

            <div class="bottomcenter-container">
                <!--the text input box and the on enter key pressed-->
                <input type="number" class="user-input" @bind="@userAnswer" @bind:event="oninput" @onkeydown="HandleKeyDown" />

                <!--this bit is for displaying the result, like the game over yes, skill issue stuff-->
                <p class="result-message">@resultMessage</p>


            </div>

        </div>

    </div>

</div>

<!--the css styling bit lol-->
<style>

    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
    }

    .question-box {
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 500px;
        margin-right: 500px;
        align-items: center;
        justify-content: center;
        height: 50%;
        text-align: center;
        font-family: Courier New, Courier, monospace;
    }

        .question-box .topcenter-container .question {
            font-weight: bold;
            white-space: pre-wrap;
        }

    .answer-box {
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 10px;
        margin-top: 550px;
        margin-bottom: 20px;
        margin-left: 500px;
        margin-right: 500px;
        align-items: center;
        justify-content: center;
        height: 50%;
        text-align: center;
        font-family: Courier New, Courier, monospace;
    }

        .answer-box .bottomcenter-container {
            align-items: center;
            justify-content: center;
            height: 50%;
            text-align: center;
            font-family: Courier New, Courier, monospace;
        }

            .answer-box .bottomcenter-container .result-message {
                    white-space: pre-wrap;
                    font-size: 15px;
                }

    .user-input {
        font-size: 30px;
        padding: 10px;
        width: 200px;
    }

</style>

@code {
    //variables for both storing the uh numbers and the inputs from userrrr
    private int num;
    private int? userAnswer;
    private bool isFlashingGreen = false;
    private bool isFlashingRed = false;
    private const string Level = "level";
    private string flashClassGreen => isFlashingGreen ? "flashgreen" : "";
    private string flashClassRed => isFlashingRed ? "flashred" : "";




    private const int CountdownDurationSeconds = 600;
    private DateTime countdownStartTime;
    private TimeSpan timeRemaining;
    private string timeRemainingFormatted => string.Format("{0:mm\\:ss}", timeRemaining);
    private Timer countdownTimer;


    //for managing the visability of the resultsssss
    private string? resultMessage;

    private string question;

    //starting player and boss health
    public int mainChp = 1;
    public int enemyOnehp = 5;

    protected override void OnInitialized()
    {
        GenerateNumbers();
        resultMessage = "goodluck~";
        StartCountdown();
    }

    private void StartCountdown()
    {
        countdownStartTime = DateTime.UtcNow;
        timeRemaining = TimeSpan.FromSeconds(CountdownDurationSeconds);
        countdownTimer = new Timer(UpdateTimer, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateTimer(object state)
    {
        timeRemaining = TimeSpan.FromSeconds(CountdownDurationSeconds) - (DateTime.UtcNow - countdownStartTime);

        if (timeRemaining.TotalSeconds <= 0)
        {
            countdownTimer.Dispose();
            YouLose();
        }

        InvokeAsync(StateHasChanged);
    }

    //number gen and clear past user input
    private HashSet<int> generatedNumbers = new HashSet<int>();

    private void GenerateNumbers()
    {
        Random random = new Random();
        int randomNumber;

        do
        {
            randomNumber = random.Next(1, 11);
        }
        while (generatedNumbers.Contains(randomNumber));

        generatedNumbers.Add(randomNumber);

        switch (randomNumber)
        {
            case 1:
                question = "This week at my lemonade stand I sold $29 worth of lemonade, but I had spent $34 on lemons and $14 on sugar. What was my total loss for the week?(no units needed)";
                break;
            case 2:
                question = "Sally thinks of a number, multiplies it by 2, adds 2, divides by 2 and then subtracts 2. Her answer is 2. What was her original number?";
                break;
            case 3:
                question = "Five different whole numbers, chosen from the numbers from 1 to 30, add up to 30. What is the greatest possible value of the largest of these numbers?";
                break;
            case 4:
                question = " Leo is waiting in line at school, There are 4 students ahead of him and twice as many behind him, How many students are in the line?";
                break;
            case 5:
                question = " There are 14 pieces of fruit in a bowl. There are twice as many nectarines as pears, and half as many nectarines as apples. There are no other types of fruit. How many apples are there?";
                break;
            case 6:
                question = "A rectangle has been made by joining two squares together, each equare as an area of 25cm^3 What is the perimeter of the recatangle?(no units needed)";
                break;
            case 7:
                question = "A cube is made up of 1 cm × 1 cm × 1 cm blocks and measures 12 cm × 12 cm × 12 cm. Sharyn is using the same set of blocks to make a set of stairs. Her finished set of stairs will use all the blocks and be 8 blocks high and 8 blocks from front to back. How many blocks wide will they be?";
                break;
            case 8:
                question = "It is 10am now. What time will it be in 2021 hours time? (do not need to include am or pm, answer in 12 hour time)";
                break;
            case 9:
                question = " I have a jug containing 100ml of liquid, which is half vinegar and half olive oil. How much vinegar must I add to make a mixture which is one-third olive oil?(no units needed)";
                break;
            case 10:
                question = "Hayden saved $1420 and Mitchell saved $505. After they both spent an equal amount of money, Hayden has 4 times as much money as Mitchel. In dollars, how much did each of them spend?(no units needed)";
                break;

        }

        userAnswer = null;
    }


    //presss enterrrr
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckAnswer();
        }
    }

    //define flash screen green animation sequence
    private async Task FlashScreenGreen()
    {
        isFlashingGreen = true;
        await Task.Delay(500);
        isFlashingGreen = false;
    }

    //define flash screen red animation sequence
    private async Task FlashScreenRed()
    {
        isFlashingRed = true;
        await Task.Delay(500);
        isFlashingRed = false;
    }

    private void YouWin()
    {
        NavigationManager.NavigateTo("/You-Win-Boss");
    }

    private void YouLose()
    {
        NavigationManager.NavigateTo("/You-Lose");
    }


    private async Task CheckAnswer()
    {
        bool isCorrect = CheckAnswer(userAnswer.ToString(), generatedNumbers.Last());

        if (isCorrect)
        {
            await FlashScreenGreen(); //flash screen green if correct answer
            resultMessage = "yes";
            GenerateNumbers();
            enemyOnehp = Math.Max(enemyOnehp - 1, 0);
            // Update the game state accordingly
            if (enemyOnehp == 0)
            {
                //you win screen
                YouWin();
                var currentLevel = await localStorage.GetItemAsync<int>("level");
                if (currentLevel <= 4)
                {
                    await localStorage.SetItemAsync("level", GameLevel.Level5);
                }
            }
        }
        else
        {
            await FlashScreenRed(); //flash screen red if wrong answer
            resultMessage = "Skill issue(try again)";
            // Update the game state accordingly
            mainChp = Math.Max(mainChp - 1, 0); //this bit shows that the mc hp cannot be below 0 :) also after this call the method for likr, removing one of the blocks of hp

            if (mainChp == 0)
            {
                //you lose screen
                YouLose();
            }
        }

    }

    private bool CheckAnswer(string userAnswer, int questionNumber)
    {
        bool isCorrect = false;

        switch (questionNumber)
        {
            case 1:
                isCorrect = userAnswer == "19";
                break;
            case 2:
                isCorrect = userAnswer == "3";
                break;
            case 3:
                isCorrect = userAnswer == "20";
                break;
            case 4:
                isCorrect = userAnswer == "13";
                break;
            case 5:
                isCorrect = userAnswer == "8";
                break;
            case 6:
                isCorrect = userAnswer == "30";
                break;
            case 7:
                isCorrect = userAnswer == "48";
                break;
            case 8:
                isCorrect = userAnswer == "8";
                break;
            case 9:
                isCorrect = userAnswer == "50";
                break;
            case 10:
                isCorrect = userAnswer == "200";
                break;
        }

        return isCorrect;
    }

    
}

             