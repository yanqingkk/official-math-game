@page "/Battle-1"
@inject ILocalStorageService localStorage

<div class="@flashClassGreen">

    <div class="@flashClassRed">

        <div class="question-box">

            <div class="topcenter-container">
                <p class="question">@num1 + @num2 = ?</p>
            </div>

        </div>

        <div class="answer-box">

            <div class="bottomcenter-container">
                <!--the text input box and the on enter key pressed-->
                <input type="number" class="user-input" @bind="@userAnswer" @bind:event="oninput" @onkeydown="HandleKeyDown" />

                <!--this bit is for displaying the result, like the game over yes, skill issue stuff-->
                <p class="result-message">@resultMessage</p>

            </div>

        </div>

    </div>

</div>

<!--the css styling bit lol-->
<style>

    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
    }

    .flashClassGreen {
        margin: -10px;
    }

    .question-box {
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 500px;
        margin-right: 500px;
        align-items: center;
        justify-content: center;
        height: 50%;
        text-align: center;
        font-family: Courier New, Courier, monospace;
    }

        .question-box .topcenter-container {
            align-items: center;
            justify-content: center;
            height: 50%;
            text-align: center;
            font-family: Courier New, Courier, monospace;
        }
            
            .question-box .topcenter-container .question {
                font-weight: bold;
                white-space: pre-wrap;
                font-size: 45px;
            }

    .answer-box {
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 10px;
        margin-top: 550px;
        margin-bottom: 20px;
        margin-left: 500px;
        margin-right: 500px;
        align-items: center;
        justify-content: center;
        height: 50%;
        text-align: center;
        font-family: Courier New, Courier, monospace;
    }

        .answer-box .bottomcenter-container {
            align-items: center;
            justify-content: center;
            height: 50%;
            text-align: center;
            font-family: Courier New, Courier, monospace;
        }

            .answer-box .bottomcenter-container .result-message {
                white-space: pre-wrap;
                font-size: 15px;
            }

    .user-input {
        font-size: 30px;
        padding: 10px;
        width: 200px;
    }

</style>

@code {

     //variables for both storing the uh numbers and the inputs from userrrr
    //define bool variables for flashing animation
    private int num1;
    private int num2;
    private int? userAnswer;
    private bool isFlashingGreen = false;
    private bool isFlashingRed = false;
    private const string Level = "level";
    private string flashClassGreen => isFlashingGreen ? "flashgreen" : "";
    private string flashClassRed => isFlashingRed ? "flashred" : "";

    //for managing the visability of the resultsssss
    private string? resultMessage;

    //starting player and boss health
    public int mainChp = 3;
    public int enemyOnehp = 15;

    //what the thing first start this should runnn
    protected override void OnInitialized()
    {
        GenerateNumbers();
        resultMessage = "goodluck~";
    }

    //number gen and clear past user input
    private void GenerateNumbers()
    {
        Random random = new Random();
        num1 = random.Next(1, 20);
        num2 = random.Next(1, 20);
        userAnswer = null;
    }

    //presss enterrrr
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckAnswer();
        }
    }

     //define flash screen green animation sequence
    private async Task FlashScreenGreen()
    {
        isFlashingGreen = true;
        await Task.Delay(500);
        isFlashingGreen = false;
    }

    //define flash screen red animation sequence
    private async Task FlashScreenRed()
    {
        isFlashingRed = true;
        await Task.Delay(500);
        isFlashingRed = false;
    }

    private void YouWin()
    {
        NavigationManager.NavigateTo("/You-Win-1");
    }

    private void YouLose()
    {
        NavigationManager.NavigateTo("/You-Lose");
    }

    //check the userinput and updates whatever is diaplayed
    private async Task CheckAnswer()
    {
       
        if (userAnswer == num1 + num2)
        {
            //correct answer wooo, enemy health -1
            await FlashScreenGreen(); //flash screen green if correct answer
            resultMessage = "Yes";
            GenerateNumbers();
            enemyOnehp = Math.Max(enemyOnehp - 1, 0); //this bit shows that the boss hp cannot be below 0 :)

            if (enemyOnehp == 0)
            {
               
                YouWin();

                var currentLevel = await localStorage.GetItemAsync<int>(Level);
                if (currentLevel == 0)
                {
                    await localStorage.SetItemAsync(Level, GameLevel.Level1);
                }
            }
        }
        else
        {
            //wrong answer oh no, player health -1
            await FlashScreenRed(); //flash screen red if wrong answer
            resultMessage = "Skill issue(try again)";
            mainChp = Math.Max(mainChp - 1, 0); //this bit shows that the mc hp cannot be below 0 :) also after this call the method for likr, removing one of the blocks of hp

            if (mainChp == 0)
            {
               
                YouLose();
            }
        }
    }

}
