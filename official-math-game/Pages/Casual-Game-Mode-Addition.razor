@page "/Casual-Game-Mode-Addition"
@inject ILocalStorageService localStorage

<div class="center-container">
    <h1>CASUAL GAME MODE</h1>
    <h4>[Addition]</h4>
    <p>Press enter to submit your answer</p>
    <p>Score: @additionScore</p>
    <p class="question">@num1 + @num2 = ?</p>

    <input type="number" class="user-input" @bind="@userAnswer" @bind:event="oninput" @onkeydown="HandleKeyDown" />

    <p>@resultMessage</p>

    <div class="buttons">
        <button style="--c:#FFA364" class="reset-button" @onclick="ResetScore">Reset Score</button>
        <button style="--c:#FFA364" class="main-map" @onclick="ToMainMap">Return to main map</button>
    </div>


</div>


<style>
    html, body {
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .center-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        text-align: center;
        font-family: Courier New, Courier, monospace;
        margin: 0px;
        background-color: #273248;
        color: #FFA364
    }

        .center-container .h1 {
            font-weight: bold;
        }

        .center-container .h4 {
            padding-top: 20px;
        }

        .center-container .question {
            font-weight: bold;
            font-size: 30px;
        }

    /*.center-container .reset-button {
                padding: 10px;
                justify-content: center;
                border: 1px solid #FFA364;
                font-family: Courier New, Courier, monospace;
                background-color: #273248;
                font-weight: bold;
                color: #FFA364;
            }*/

    /*.center-container .main-map {
                padding: 10px;
                justify-content: center;
                border: 1px solid #FFA364;
                font-family: Courier New, Courier, monospace;
                background-color: #273248;
                font-weight: bold;
                color: #FFA364;
            }*/

    .user-input {
        background-color: #FFA364;
        font-family: Courier New, Courier, monospace;
        color: #273248;
        justify-content: center;
        font-size: 24px;
        padding: 10px;
        width: 200px;
        font-weight: bold;
        border: none;
        outline: none;
        -moz-appearance: textfield;
    }

    button {
        --c: #FFA364; /* the color*/

        box-shadow: 0 0 0 .1em inset var(--c);
        --_g: linear-gradient(var(--c) 0 0) no-repeat;
        background: var(--_g) calc(var(--_p,0%) - 100%) 0%, var(--_g) calc(200% - var(--_p,0%)) 0%, var(--_g) calc(var(--_p,0%) - 100%) 100%, var(--_g) calc(200% - var(--_p,0%)) 100%;
        background-size: 50.5% calc(var(--_p,0%)/2 + .5%);
        outline-offset: .1em;
        transition: background-size .4s, background-position 0s .4s;
        color: #FFA364;
    }

        button:hover {
            --_p: 100%;
            transition: background-position .4s, background-size 0s;
            color: white;
        }

        button:active {
            box-shadow: 0 0 9e9q inset #FFA364;
            background-color: var(--c);
            color: #FFA364;
        }



    /* body {
            height: 100vh;
            margin: 0;
            display: grid;
            place-content: center;
            grid-auto-flow: column;
            gap: 40px;
        }*/

    button {
        font-family: Courier New, Courier, monospace;
        font-size: 17px;
        cursor: pointer;
        padding: .1em .6em;
        border: none;
    }
</style>

@code {
    private int num1;
    private int num2;
    private int? userAnswer;
    private string? resultMessage;
    private int additionScore;

    protected override async Task OnInitializedAsync()
    {
        GenerateNumbers();
        resultMessage = "goodluck~";
        additionScore = await localStorage.GetItemAsync<int>("score1");
    }

    private void GenerateNumbers()
    {
        Random random = new Random();
        num1 = random.Next(1, 50);
        num2 = random.Next(1, 50);
        userAnswer = null;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckAnswer();
        }
    }

    private async Task CheckAnswer()
    {

        if (userAnswer == num1 + num2)
        {
            resultMessage = "Yes";
            GenerateNumbers();
            additionScore++;
            await localStorage.SetItemAsync("score1", additionScore);
        }
        else
        {
            resultMessage = "Skill issue (try again)";
            additionScore--;
            if (additionScore < -5)
            {
                resultMessage = "bruh, you suck";
            }
        }
    }

    private async Task ResetScore()
    {
        additionScore = 0;
        await localStorage.SetItemAsync("score1", 0);
    }

    private void ToMainMap()
    {
        NavigationManager.NavigateTo("/Main-Map");
    }

}